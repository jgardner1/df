TODO
====

* Py2exe. Figure out how to distribute this thing.
    * See http://www.py2exe.org/index.cgi/Tutorial and http://gizmothunder.blogspot.com/2010/09/pyglet-py2exe.html
    * Setup.py


* Moving up and down either with the scroll wheel, a key
combo plus mouse motion vertically, or the same key combo and up/down.


* Zoom out and jump interface. Eliana's idea is to press a key, see the entire
map, and then click on a point that it jumps to.

* Moving up/down should "peel" away the top layer or stick it back on? Some kind
of animation seems important. Possibilities:
    * Rotating tiles? When moving up, the top layer rotates away. When moving
    down, the top level rotates in.
    * Phasing in
    * Gradual, rather than atomic, moves through depth.

* Moving up/down still takes a while. I need a faster algorithm.
    * Can I store the entire map's vertices in the video card memory? Then I
    could use depth testing.

    * Can I redraw only some of the tiles? The ones that are deep need only to
    move up.


* Saving maps. Store the maps in a file. File format: JSON? Or maybe pickle
format. When I move to C, I can write a script to convert from pickle to C's
format. cPickle may or may not be faster than JSON, so make it general.

* Tiling different kinds of stone. Let's say I have 16 different colors of
stone, plus 4 or so colors of wood, for 20 colors of material altogether. That
means for every item I have, I need to have a cell that describes it. That's
20 up stairs, 20 down stairs, and 20 up/down stairs, and 20 tables, etc...
This leads me to believe that I can have some algorithmically generated tiles?
Or maybe tiles have 3 colors, and the colors are determined by the material?
Perhaps I can do something like specifying 1 tile for all objects, and then
layering on top of it a texture. If the tile specified the normal, then we can
shade with dynamic lighting. This would be interesting.

Or I can go the minecraft route and just make things in 3D and have 20
different kinds of textures.

Or I can do what Dwarf Fortress does, and alternate FG and BG colors for
different materials.

* Items on the map. Add things that the dwarves can interact with.

* Dwarves on the map. At first, they just wander around randomly.

* AI with pathfinding for the Dwarves. Have them choose two random points on
the map and have them walk back and forth.

* Animate the dwarves and the items.

* Water. I would like water to be semi-realistic. With the modern GPUs, it
should be possible to make neat water effects without using tiles.

* Perspective. If I actually drew the walls, I think it might be easier to
tell them apart from the floors. But then we're in full 3D mode, aren't we?


DESIGN
======



Updating the Map
----------------

The map is going to contain ALL the things needed to draw *any* view of the
map. This includes items.

Whenever something changes, for instance, an item moves or a cube is cleared
or something built, then the map will create an event/signal that indicates
what changed. The MapView will listen for these, and update the VertexArray
accordingly.



Generation Algorithm
--------------------

An algorithm I used that was nice was to do a random walk, increasing the
terrain underneath by a certain height. I could do the same for ore or
whatnot. If I want a vein, I can vary the width of the vein, and then have a
direction that doesn't change very much, or a force that pulls the random walk
in one direction compared to another. I can vary levels as well to have veins
that go through levels.

Modeling water: I should study how hydrodynamics works in relation to erosion
and such. Maybe what I can do is model the plate tectonics of the region, and
then model soil build up and water behavior, and then model what plants do to
prevent erosion, and then on top of that throw a few world-wide catastrophes
such as a flood or a meteor crater.

Physics: I think I need to build up a physical model of how terrain works. I
need to understand shear forces and such, and a simple way to model if you can
build rooms of certain size. Also, what do supports do and how much weight
can they carry? Should dwarves build these automatically or should I requie
the player to build them?

I need to study geology. How are rocks formed? Where do geologists expect to
find certain minerals? For instance, does gold collect in pockets in intrusive
igneous rocks?



Visibility
----------

I would like to have a Fog of War going on. Each tile is marked with whether
you can see it. If you can, it is then marked with whether it is currently
visible, how long since you saw it, and what you saw last.

You can only see so far in air and water. To simulate this, the distance to
see the spot is accounted for using the simple mapping algorithm.

Perhaps I can take into account the number of paths that lead to the point? I
don't know.

Do I want to consider only Line of Sight? I think this is a good idea. Some
kind of raycasting algorithm that will increase the number of rays the further
you get out?



Multiprocessing
---------------

I think using the "multiprocess" module is wise.

I will probably need:
(1) A synchronization method so that we can process 1 tick at a time.
(2) A shared memory segment for the game state.
(3) A dispatch method so that updates can be made in parallel. If they have 6
cores, then we run 6 clients, and we send the updates that need to be
performed in parallel to each one.




BUGS
====

* The air fog stinks, bad.

* It's too hard to tell what tiles are floors and which are walls.




CRAZY IDEAS
===========

Candy mountain?

Make christmas stuff for Santa?
